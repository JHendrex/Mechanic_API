swagger: '2.0'
info:
  title: "Mechanic API"
  description: "This API manages customer, mechanic, service ticket, and inventory data for a mechanic shop."
  version: "1.0.0"
host: "mechanic-api-lz3x.onrender.com"
schemes:
  - "https"
consumes:
  - "application/json"
produces:
  - "application/json"

securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header

paths:
  #Customer Paths
  /customers/login:
    post:
      tags:
        - Customers
      summary: "Login endpoint, (generates token)"
      description: "Validates customer credentials, generates and return a customer specific token."
      parameters:
        - in: "body"
          name: "body"
          description: "Login Credentials"
          required: true
          schema:
            $ref: "#/definitions/LoginCredentials"
      responses:
        200:
          description: "Login successful"
          schema:
            $ref: "#/definitions/LoginResponse"

  /customers:
    post:
      tags:
        - Customers
      summary: "Endpoint to create/register a new customer."
      description: "Endpoint to create a new customer in the Mechanic shop system, emails and phone must be unique."
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to create a new customer."
          required: true
          schema:
            $ref: "#/definitions/CreateCustomerPayload"
      responses:
        201:
          description: "Successful customer creation"
          schema:
            $ref: "#/definitions/CreateCustomerResponse"
          examples:
            application/json:
              id: 1
              name: John Doe
              email: johnd@email.com
              password: password123
              phone: 123-456-7890

    get:
      tags:
        - Customers
      summary: "Returns all customers"
      description: "Endpoint to retrieve a list of all customers."
      responses:
        200:
          description: "Retrieved customers successfully"
          schema:
            $ref: "#/definitions/AllCustomers"

    put:
      tags:
        - Customers
      summary: "Endpoint to update a customer."
      description: "Endpoint to update a customer, this is a token authenticated route, and the user must be logged in to update their account."
      security:
        - bearerAuth: []
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to update a customer."
          required: true
          schema:
            $ref: "#/definitions/UpdateCustomerPayload"
      responses:
        200:
          description: "Successfully updated customer"
          schema:
            $ref: "#/definitions/UpdateCustomerResponse"
          examples:
            application/json:
              id: 1
              name: Dohn Joe
              email: dohnj@email.com
              password: password123
              phone: 123-456-7890

    delete:
      tags:
        - Customers
      summary: "Endpoint to delete a customer."
      description: "Endpoint to delete a customer. Requires token authentication, customer must be logged in to delete their account."
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Successfully deleted customer"
          schema:
            $ref: "#/definitions/DeleteCustomerResponse"
          examples:
            application/json:
              message: "successfully deleted user <customer_id>."

  /customers/<int:customer_id>:
    get:
      tags:
        - Customers
      summary: "Returns specific customer"
      description: "Endpoint to retrieve a specific customer."
      responses:
        200:
          description: "Retrieved customer successfully"
          schema:
            $ref: "#/definitions/OneCustomer"
  
  /customers/my_tickets:
    get:
      tags:
        - Customers
      summary: "Returns all tickets for user."
      description: "Returns all tickets associated with specific customer. Requires token authentication, customer must be logged in to view their tickets."
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Retrieved tickets successfully"
          schema:
            $ref: "#/definitions/CustomerTickets"

  #Service Ticket Paths
  /service_tickets:
    post:
      tags:
        - Service Tickets
      summary: "Endpoint to create new service ticket."
      description: "Endpoint to create a new service ticket in the Mechanic shop system."
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to create a new service ticket."
          required: true
          schema:
            $ref: "#/definitions/CreateServiceTicketPayload"
      responses:
        201:
          description: "Successfully created service ticket"
          schema:
            $ref: "#/definitions/CreateServiceTicketResponse"
          examples:
            application/json:
              id: 1
              VIN: 1a2b3c4d5e6f7g8h9
              service_date: 2025-07-12
              service_desc: Realignment and oil change.
              customer_id: 1

    get:
      tags:
        - Service Tickets
      summary: "Returns all service tickets"
      description: "Endpoint to retrieve a list of all service tickets."
      responses:
        200:
          description: "Retrieved service tickets successfully"
          schema:
            $ref: "#/definitions/AllServiceTickets"

  /service_tickets/<int:service_ticket_id>:
    get:
      tags:
        - Service Tickets
      summary: "Returns specific service ticket"
      description: "Endpoint to retrieve a specific service ticket."
      responses:
        200:
          description: "Retrieved service ticket successfully"
          schema:
            $ref: "#/definitions/OneServiceTicket"

  /service_tickets/<int:service_ticket_id>/edit:
    put:
      tags:
        - Service Tickets
      summary: "Endpoint to add or remove mechanics to a service ticket"
      description: "Endpoint to add or remove specific mechanics to a specific service ticket."
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to add or remove mechanics to a service ticket."
          required: true
          schema: 
            $ref: "#/definitions/EditTicketPayload"
      responses:
        200:
          description: "Successfully updated service ticket"
          schema:
            $ref: "#/definitions/EditTicketResponse"
          examples:
            application/json:
              id: 1
              VIN: 1a2b3c4d5e6f7g8h9
              customer:
                id: 1
                name: John Darksoul
              customer_id: 1
              inventory:
                []
              mechanics: [
                {
                  id: 1,
                  name: John Marsh
                }
              ]
              service_date: 2025-07-12
              service_desc: Realignment and oil change.

  /service_tickets/<int:service_ticket_id>/item:
    put:
      tags:
        - Service Tickets
      summary: "Endpoint to add or remove items to a service ticket"
      description: "Endpoint to add or remove specific items to a specific service ticket."
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to add or remove items to a service ticket."
          required: true
          schema: 
            $ref: "#/definitions/ItemTicketPayload"
      responses:
        200:
          description: "Successfully updated service ticket"
          schema:
            $ref: "#/definitions/ItemTicketResponse"
          examples:
            application/json:
              id: 1
              VIN: 1a2b3c4d5e6f7g8h9
              customer:
                id: 1
                name: John Darksoul
              customer_id: 1
              inventory: [
                {
                  id: 1,
                  name: Headlamp,
                  price: 30.00
                }
              ]
              mechanics: [
                {
                  id: 1,
                  name: John Marsh
                }
              ]
              service_date: 2025-07-12
              service_desc: Realignment and oil change.
              
  #Mechanic Paths
  /mechanics:
    post:
      tags:
        - Mechanics
      summary: "Endpoint to create new mechanic."
      description: "Endpoint to create a new mechanic in the Mechanic shop system."
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to create a new mechanic."
          required: true
          schema:
            $ref: "#/definitions/CreateMechanicPayload"
      responses:
        201:
          description: "Successfully created mechanic"
          schema:
            $ref: "#/definitions/CreateMechanicResponse"
          examples:
            application/json:
              id: 1
              name: John Marsh
              email: jmarsh@email.com
              phone: 123-456-7890
              salary: 75000.00

    get:
      tags:
        - Mechanics
      summary: "Returns all mechanics"
      description: "Endpoint to retrieve a list of all mechanics."
      responses:
        200:
          description: "Retrieved mechanics successfully"
          schema:
            $ref: "#/definitions/AllMechanics"

  /mechanics/<int:mechanic_id>:
    get:
      tags:
        - Mechanics
      summary: "Returns specific mechanic"
      description: "Endpoint to retrieve a specific mechanic."
      responses:
        200:
          description: "Retrieved mechanic successfully"
          schema:
            $ref: "#/definitions/OneMechanic"
    
    put:
      tags:
        - Mechanics
      summary: "Endpoint to update a mechanic."
      description: "Endpoint to update a specific mechanic."
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to update a mechanic."
          required: true
          schema:
            $ref: "#/definitions/UpdateMechanicPayload"
      responses:
        200:
          description: "Successfully updated mechanic"
          schema:
            $ref: "#/definitions/UpdateMechanicResponse"
          examples:
            application/json:
              id: 1
              name: Mohn Jarsh
              email: Mohnj@email.com
              phone: 123-456-7890
              salary: 80000.00

    delete:
      tags:
        - Mechanics
      summary: "Endpoint to delete a mechanic."
      description: "Endpoint to delete a specific mechanic."
      responses:
        200:
          description: "Successfully deleted mechanic"
          schema:
            $ref: "#/definitions/DeleteMechanicResponse"
          examples:
            application/json:
              message: "successfully deleted mechanic <mechanic_id>."

  /mechanics/popular:
    get:
      tags:
        - Mechanics
      summary: "Returns and sorts all mechanics"
      description: "Endpoint to retrieve a list of all mechanics and sorts them from most service tickets to least."
      responses:
        200:
          description: "Retrieved mechanics successfully"
          schema:
            $ref: "#/definitions/AllMechanics"

  #Inventory Paths
  /inventory:
    post:
      tags:
        - Inventory
      summary: "Endpoint to create new item."
      description: "Endpoint to create a new item in the Mechanic shop inventory system."
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to create a new item."
          required: true
          schema:
            $ref: "#/definitions/CreateItemPayload"
      responses:
        201:
          description: "Successfully created item"
          schema:
            $ref: "#/definitions/CreateItemResponse"
          examples:
            application/json:
              id: 1
              name: Headlamp
              price: 15.60

    get:
      tags:
        - Inventory
      summary: "Returns all items"
      description: "Endpoint to retrieve a list of all items."
      responses:
        200:
          description: "Retrieved items successfully"
          schema:
            $ref: "#/definitions/AllItems"

  /inventory/<int:inventory_id>:
    get:
      tags:
        - Inventory
      summary: "Returns one item."
      description: "Endpoint to return one specific item in the Inventory."
      responses:
        200:
          description: "Retrieved item successfully"
          schema:
            $ref: "#/definitions/OneItem"

    put:
      tags:
        - Inventory
      summary: "Update one item"
      description: "Endpoint to update one specific item."
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to update an item."
          required: true
          schema:
            $ref: "#/definitions/UpdateItemPayload"
      responses:
        200:
          description: "Successfully updated item"
          schema:
            $ref: "#/definitions/UpdateItemResponse"
          examples:
            application/json:
              id: 1
              name: Tire
              price: 50.00

    delete:
      tags:
        - Inventory
      summary: "Deletes an item."
      description: "Endpoint to delete a specific item."
      responses:
        200:
          description: "Successfully deleted item"
          schema:
            $ref: "#/definitions/DeleteItemResponse"
          examples:
            application/json:
              message: "successfully deleted item <inventory_id>."

  /inventory/<int:inventory_id>/tickets:
    get:
      tags:
        - Inventory
      summary: "Get service tickets related to item"
      description: "Endpoint to get all service tickets related to a specific item."
      responses:
        200:
          description: "Successfully retrieved all related service tickets"
          schema:
            $ref: "#/definitions/AllItemTickets"


definitions:
  #Customer Definitions
  LoginCredentials:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"

    required:
      - email
      - password

  LoginResponse:
    type: "object"
    properties:
      token:
        type: "string"
      message:
        type: "string"
      status:
        type: "string"

  CreateCustomerPayload:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      
    required:
      - name
      - email
      - password
      - phone
    
  CreateCustomerResponse:
    type: "object"
    properties:
      id:
        type: "int"
      name:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"

  AllCustomers:
    type: "array"
    items:
      type: "object"
      properties:
        id:
          type: "integer"
        name:
          type: "string"
        email:
          type: "string"
        password:
          type: "string"
        phone:
          type: "string"

  OneCustomer:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"

  UpdateCustomerPayload:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"

    required:
      - name
      - email
      - password
      - phone

  UpdateCustomerResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
  
  DeleteCustomerResponse:
    type: "object"
    properties:
      message:
        type: "string"

  CustomerTickets:
    type: "array"
    items:
      type: "object"
      properties:
        id:
          type: "integer"
        VIN:
          type: "string"
        customer_id:
          type: "integer"
        inventory:
          type: "array"
          items:
            type: "object"
            properties:
              id: 
                type: "integer"
              price:
                type: "number"
                format: "float"
        mechanics:
          type: "array"
          items:
            type: "object"
            properties:
              id:
                type: "integer"
              name:
                type: "string"
        service_date:
          type: "string"
        service_desc:
          type: "string"

  #Service Ticket Definitions
  CreateServiceTicketPayload:
    type: "object"
    properties:
      VIN:
        type: "string"
      service_date:
        type: "string"
        format: "date"
      service_desc:
        type: "string"
      customer_id:
        type: "integer"
      
    required:
      - VIN
      - service_date
      - service_desc
      - customer_id

  CreateServiceTicketResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      VIN:
        type: "string"
      service_date:
        type: "string"
        format: "date"
      service_desc:
        type: "string"
      customer_id:
        type: "integer"

  AllServiceTickets:
    type: "array"
    items:
      type: "object"
      properties:
        id:
          type: "integer"
        VIN:
          type: "string"
        service_date:
          type: "string"
          format: "date"
        service_desc:
          type: "string"
        customer_id:
          type: "integer"

  OneServiceTicket:
    type: "object"
    properties:
      id:
        type: "integer"
      VIN:
        type: "string"
      service_date:
        type: "string"
        format: "date"
      service_desc:
        type: "string"
      customer_id:
        type: "integer"

  EditTicketPayload:
    type: "object"
    properties:
      add_mechanic_ids:
        type: "array"
        items:
          type: "integer"
      remove_mechanic_ids:
        type: "array"
        items:
          type: "integer"

  EditTicketResponse:
    type: "object"
    properties:
      VIN:
        type: "string"
      customer_id:
        type: "integer"
      inventory:
        type: "array"
        items:
          type: "object"
          properties:
            id: 
              type: "integer"
            price:
              type: "number"
              format: "float"
      mechanics:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "integer"
            name:
              type: "string"
      service_date:
        type: "string"
      service_desc:
        type: "string"

  ItemTicketPayload:
    type: "object"
    properties:
      add_item_ids:
        type: "array"
        items:
          type: "integer"
      remove_item_ids:
        type: "array"
        items:
          type: "integer"

  ItemTicketResponse:
    type: "object"
    properties:
      VIN:
        type: "string"
      customer_id:
        type: "integer"
      inventory:
        type: "array"
        items:
          type: "object"
          properties:
            id: 
              type: "integer"
            price:
              type: "number"
              format: "float"
      mechanics:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "integer"
            name:
              type: "string"
      service_date:
        type: "string"
      service_desc:
        type: "string"

  #Mechanic Definitions
  CreateMechanicPayload:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      salary:
        type: "number"
        format: "float"
      
    required:
      - name
      - email
      - phone
      - salary

  CreateMechanicResponse:
    type: "object"
    properties:
      id:
        type: "int"
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      salary:
        type: "number"
        format: "float"

  AllMechanics:
    type: "array"
    items:
      type: "object"
      properties:
        id:
          type: "integer"
        name:
          type: "string"
        email:
          type: "string"
        phone:
          type: "string"
        salary:
          type: "number"
          format: "float"
        service_tickets: 
          type: "array"
          items:
            type: "object"
            properties:
              id:
                type: "integer"
              VIN:
                type: "string"
              service_date:
                type: "string"
                format: "date"

  OneMechanic:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      salary:
        type: "number"
        format: "float"

  UpdateMechanicPayload:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      salary:
        type: "number"
        format: "float"
      
    required:
      - name
      - email
      - phone
      - salary

  UpdateMechanicResponse:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      salary:
        type: "number"
        format: "float"

  DeleteMechanicResponse:
    type: "object"
    properties:
      message:
        type: "string"

  #Inventory Definitions
  CreateItemPayload:
    type: "object"
    properties:
      name:
        type: "string"
      price:
        type: "number"
        format: "float"

    required:
      - name
      - price

  CreateItemResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      price:
        type: "number"
        format: "float"

  AllItems:
    type: "array"
    items:
      type: "object"
      properties:
        id:
          type: "integer"
        name:
          type: "string"
        price:
          type: "number"
          format: "float"

  OneItem:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      price:
        type: "number"
        format: "float"

  UpdateItemPayload:
    type: "object"
    properties:
      name:
        type: "string"
      price:
        type: "number"
        format: "float"
      
    required:
      - name
      - price

  UpdateItemResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      price:
        type: "number"
        format: "float"

  DeleteItemResponse:
    type: "object"
    properties:
      message:
        type: "string"
      
  AllItemTickets:
    type: "array"
    items:
      type: "object"
      properties:
        VIN:
          type: "string"
        customer_id:
          type: "integer"
        inventory:
          type: "array"
          items:
            type: "object"
            properties:
              id: 
                type: "integer"
              price:
                type: "number"
                format: "float"
        mechanics:
          type: "array"
          items:
            type: "object"
            properties:
              id:
                type: "integer"
              name:
                type: "string"
        service_date:
          type: "string"
        service_desc:
          type: "string"
